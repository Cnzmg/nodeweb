<!DOCTYPE html>
<html>

	<head>
		<meta charset="utf-8">
		<title><%=  title %></title>
		<style type="text/css">
			html,
			body {
				margin: 0;
				padding: 0;
				overflow: hidden;
			}
			
			iframe {
				border: none;
			}
			/*img {
				display: block;
				width: 500px;
				height: 400px;
			}*/
			
			@keyframes opcimg {
				0% {
					opacity: 1
				}
				50% {
					opacity: 0
				}
				100% {
					opacity: 1
				}
			}
			
			.active {
				position: relative;
				width: 100%;
				margin-top:8%;
			}
			
			.active img:nth-of-type(1) {
				position: absolute;
				width: 100%;
			}
			
			.active img:nth-of-type(2) {
				visibility: visible;
				opacity: 0;
				width: 100%;
				z-index: 100;
				transform: translateZ(0);
			}
		</style>
		<script src="http://www.jq22.com/jquery/jquery-2.1.1.js"></script>
	</head>

	<body style="    background: rgb(42, 45, 53);">
		<canvas id="J_canvas" width="" height=""></canvas>
		<!--<div class="active"> 	//动态背景 
			<img class="c-acbackground" src="/images/TB-bg-1-3840-1280.jpg" alt="" />
			<img class="c-animation" src="/images/TB-ac-1-3840-1280.png" alt="" />
		</div>
		<script type="text/javascript">
			var e = Math.floor(1 + Math.random() * 5);
			jQuery('.c-acbackground').attr('src','/images/TB-bg-'+ e + '-3840-1280.jpg');
			jQuery('.c-animation').attr('src','/images/TB-ac-'+ e +'-3840-1280.png').css({
				'animation': 'opcimg 5s .25s ease both infinite'
			}, 5000);
		</script>-->

		<!--<canvas id="" width="" height="" style="background: #000;"></canvas>-->
		<!--<canvas id="c" width="918" height="937"></canvas>-->

		<!--js 原生延迟加载-->
		<!--<img src="" c-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1497274158197&di=8845befd9fbda1e99e565b9c2298be50&imgtype=0&src=http%3A%2F%2Fuploads.xuexila.com%2Fallimg%2F1503%2F626-15031G42255b3.jpg">
		<img src="" c-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1497274158196&di=4a38d248001c145c5b4dd31474dedf41&imgtype=0&src=http%3A%2F%2Fpic29.nipic.com%2F20130512%2F11178195_152908769116_2.jpg">
		<img src="" c-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1497274158196&di=b39e8b14d214b7aa518d7a8328939efb&imgtype=0&src=http%3A%2F%2Fimage16-c.poco.cn%2Fmypoco%2Fmyphoto%2F20141114%2F12%2F4567377520141114124637053.jpg%3F1024x684_120">
		<img src="" c-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1497274158196&di=f2e7a6ffbfa3f92025c91e6180b5e317&imgtype=0&src=http%3A%2F%2Ffile31.mafengwo.net%2FM00%2F3F%2F26%2FwKgBs1gXBQuAPWGGABOK4vbGpt412.groupinfo.w600.jpeg">
		<img src="" c-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1497274158195&di=6a073a070b9cea1214efc0994ed6dde1&imgtype=0&src=http%3A%2F%2Fimages3.ctrip.com%2Fwri%2Fimages%2F200610%2F100602312604121954734.jpg">
		<img src="" c-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1497274158195&di=a9436d83f55b301d1df9cd24f6e367e7&imgtype=0&src=http%3A%2F%2Fcyjctrip.qiniudn.com%2F69015%2F1379755311203p184vt4juft5p1t8q1andgp5ijn11.jpg">
		<img src="" c-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1497274158195&di=2b6bc6b871d4f7f267169dfcfb727f84&imgtype=0&src=http%3A%2F%2Fcyjctrip.qiniudn.com%2F106357%2F1395933091608p18k21ek6kvj1gv2ta910kn1002m.jpg">-->

		<!--<script type="text/javascript">
			var aImg = document.querySelectorAll('img');
			var len = aImg.length;
			var n = 0; //存储图片加载到的位置，避免每次都从第一张图片开始遍历
			window.onscroll = function() {
				var seeHeight = document.documentElement.clientHeight;
				var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
				for(var i = n; i < len; i++) {
					if(aImg[i].offsetTop < seeHeight + scrollTop) {
						if(aImg[i].getAttribute('src') == '') {
							aImg[i].src = aImg[i].getAttribute('c-src');
						}
						n = i + 1;
					}
				}
			};
		</script>-->
		<script type="text/javascript">
			var creatimg = document.querySelectorAll('img'),
				len = creatimg.length,
				n = 0,
				seeHeight, scrollTop;
			window.onload = function() {
				seeHeight = document.documentElement.clientHeight;
				scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
				for(var i = n; i < len; i++) {
					if(creatimg[i].offsetTop < seeHeight + scrollTop) {
						if(creatimg[i].getAttribute('src') == '') {
							creatimg[i].src = creatimg[i].getAttribute('c-src')
						}
						n = i + 1;
					} else {
						//						alert(creatimg[i].offsetTop);
					}
				}
			};
			var GLOBAL_TEST_1 = "123123123";
			// this is 函数柯里化   设计函数传参  
			function ajx1(data, callback) {
				console.log('this is test1' + JSON.stringify(data));
			}

			function ajx2(data, callback) {
				console.log('this is test2' + data);
			}

			function callbackfn(callback) {
				ajx1({
					data: GLOBAL_TEST_1 //JavaScript 高级函数   function 是第一等王者
				}, callback);
			}

			function backfn(e) {
				console.log(e);
			}
			callbackfn(backfn());
			//			****************************************************************
			//封装柯里化函数 
			var currying = function(fn) {
				var args = Array.prototype.slice.call(arguments, 1); //替换掉第一个arguments 的字符

				return function() {
					if(arguments.length === 0) {
						return fn.apply(this, args); //无参数，调用此函数
					} else {
						[].push.apply(args, arguments); //传了参数，把参数保存下来   
						return arguments.callee; //返回函数引用
					}
				}
			}
			//**************************************************************
			//使用封装的柯里化     函数实例
			var currytest = (function() {
				var money = 0;
				return function() {
					for(var i = 0; i < arguments.length; i++) {
						money = money + arguments[i];
					}
					return money;
				}
			})();
			var currytest = currying(currytest, 100);
			currytest(200);
			currytest(300);
			setTimeout(function() {
				console.log(currytest()); // 使用方法
			}, 1800);
			//*************************canvas 绘图********************************************
			//			var w = c.width = window.innerWidth,  
			//				h = c.height = window.innerHeight,
			//				ctx = c.getContext('2d'),   //开始绘本
			//				opts = {
			//					baseBaseSize: 15,
			//					addedBaseSize: 5,
			//					baseVel: 2,
			//					addedVel: 1,
			//					baseTime: 60,
			//					addedTime: 20,
			//					overTime: 5,
			//					sliding: .99,
			//					particleChance: .9,
			//					particles: 100,
			//					templateParticleColor: 'hsla(hue,80%,40%,alp)',
			//					repaintAlpha: 'rgba(0,0,0,.1)',
			//					startColor: .2,
			//					fullColor: .5,
			//					stopColor: .6,
			//					timeToColorChange: 3
			//				},
			//				particles = [],
			//				tick = 0;
			//
			//			function Particle() {
			//				this.reset();
			//			}
			//			Particle.prototype.reset = function() {
			//				this.x = Math.pow(Math.random(), 1 / 4);
			//				this.y = h / 2;
			//				var color = opts.templateParticleColor.replace('hue', this.x * 360 * 2 + tick * opts.timeToColorChange);
			//				this.baseSize = (Math.random() + this.x) / 2 * (opts.baseBaseSize + opts.addedBaseSize * Math.random());
			//				this.gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, this.baseSize / 2);
			//				this.gradient.addColorStop(opts.startColor, color.replace('alp', 0));
			//				this.gradient.addColorStop(opts.fullColor, color.replace('alp', 1));
			//				this.gradient.addColorStop(opts.stopColor, color.replace('alp', 1));
			//				this.gradient.addColorStop(1, color.replace('alp', 0));
			//
			//				this.vx = -(1 + Math.random() / 10 - this.x) * (opts.baseVel + Math.random() * opts.addedVel);
			//				this.vy = Math.pow(this.x, 4) * (opts.baseVel + Math.random() * opts.addedVel) * (Math.random() < .5 ? -1 : 1);
			//
			//				this.x *= w / 2;
			//				if(Math.random() < .5) {
			//					this.x = w - this.x;
			//					this.vx *= -1;
			//				}
			//
			//				this.time = opts.baseTime + opts.addedTime * Math.random();
			//				this.tick = this.time + opts.overTime;
			//
			//			}
			//			Particle.prototype.step = function() {
			//				var size;
			//				if(this.tick <= this.time) {
			//					this.x += this.vx *= opts.sliding;
			//					this.y += this.vy *= opts.sliding;
			//					size = Math.pow(this.tick / this.time, 1 / 2)
			//				} else size = 1 - ((this.tick - this.time) / opts.overTime) + .000001;
			//
			//				--this.tick;
			//
			//				ctx.translate(this.x, this.y);
			//				ctx.scale(size, size);
			//				ctx.fillStyle = this.gradient;
			//				ctx.fillRect(-this.baseSize / 2, -this.baseSize / 2, this.baseSize, this.baseSize);
			//				ctx.scale(1 / size, 1 / size);
			//				ctx.translate(-this.x, -this.y);
			//
			//				if(this.tick <= 0)
			//					this.reset();
			//			}
			//
			//			function anim() {
			//				window.requestAnimationFrame(anim);
			//
			//				ctx.globalCompositeOperation = 'source-over';
			//				ctx.fillStyle = opts.repaintAlpha;
			//				ctx.fillRect(0, 0, w, h);
			//
			//				ctx.globalCompositeOperation = 'lighter';
			//
			//				++tick;
			//
			//				if(particles.length < opts.particles && Math.random() < opts.particleChance)
			//					particles.push(new Particle);
			//
			//				particles.map(function(particle) {
			//					particle.step();
			//				});
			//			}
			//			ctx.fillStyle = '#222';
			//			ctx.fillRect(0, 0, w, h);
			//			anim();
			//
			//			window.addEventListener('resize', function() {
			//
			//				w = c.width = window.innerWidth;
			//				h = c.height = window.innerHeight;
			//
			//				ctx.fillStyle = '#222';
			//				ctx.fillRect(0, 0, w, h);
			//			})
		</script>

	</body>
	<!--<script type="text/javascript">
	
$(function(){
  var canvas = document.querySelector('canvas'),
      ctx = canvas.getContext('2d')
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  ctx.lineWidth = .3;
  ctx.strokeStyle = (new Color(150)).style;
	
  var mousePosition = {
    x: 30 * canvas.width / 100,
    y: 30 * canvas.height / 100
  };

  var dots = {
    nb: 150,
    distance: 50,
    d_radius: 100,
    array: []
  };

  function colorValue(min) {
    return Math.floor(Math.random() * 255 + min);
  }
  
  function createColorStyle(r,g,b) {
//  return 'rgba(' + r + ',' + g + ',' + b + ', 0.8)';
	return 'rgba(185,185,185, 0.8)';
  }
  
  function mixComponents(comp1, weight1, comp2, weight2) {
    return (comp1 * weight1 + comp2 * weight2) / (weight1 + weight2);
  }
  
  function averageColorStyles(dot1, dot2) {
    var color1 = dot1.color,
        color2 = dot2.color;
    
    var r = mixComponents(color1.r, dot1.radius, color2.r, dot2.radius),
        g = mixComponents(color1.g, dot1.radius, color2.g, dot2.radius),
        b = mixComponents(color1.b, dot1.radius, color2.b, dot2.radius);
    return createColorStyle(Math.floor(r), Math.floor(g), Math.floor(b));
  }
  
  function Color(min) {
    min = min || 0;
    this.r = colorValue(min);
    this.g = colorValue(min);
    this.b = colorValue(min);
    this.style = createColorStyle(this.r, this.g, this.b);
  }

  function Dot(){
    this.x = Math.random() * canvas.width;
    this.y = Math.random() * canvas.height;

    this.vx = -.1 + Math.random();
    this.vy = -.1 + Math.random();

    this.radius = Math.random() * 3;

    this.color = new Color();
    console.log(this);
  }

  Dot.prototype = {
    draw: function(){
      ctx.beginPath();
      ctx.fillStyle = this.color.style;
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
      ctx.fill();
    }
  };

  function createDots(){
    for(i = 0; i < dots.nb; i++){
      dots.array.push(new Dot());
    }
  }

  function moveDots() {
    for(i = 0; i < dots.nb; i++){

      var dot = dots.array[i];

      if(dot.y < 0 || dot.y > canvas.height){
        dot.vx = dot.vx;
        dot.vy = - dot.vy;
      }
      else if(dot.x < 0 || dot.x > canvas.width){
        dot.vx = - dot.vx;
        dot.vy = dot.vy;
      }
      dot.x += dot.vx;
      dot.y += dot.vy;
    }
  }

  function connectDots() {
    for(i = 0; i < dots.nb; i++){
      for(j = 0; j < dots.nb; j++){
        i_dot = dots.array[i];
        j_dot = dots.array[j];

        if((i_dot.x - j_dot.x) < dots.distance && (i_dot.y - j_dot.y) < dots.distance && (i_dot.x - j_dot.x) > - dots.distance && (i_dot.y - j_dot.y) > - dots.distance){
          if((i_dot.x - mousePosition.x) < dots.d_radius && (i_dot.y - mousePosition.y) < dots.d_radius && (i_dot.x - mousePosition.x) > - dots.d_radius && (i_dot.y - mousePosition.y) > - dots.d_radius){
            ctx.beginPath();
            ctx.strokeStyle = averageColorStyles(i_dot, j_dot);
            ctx.moveTo(i_dot.x, i_dot.y);
            ctx.lineTo(j_dot.x, j_dot.y);
            ctx.stroke();
            ctx.closePath();
          }
        }
      }
    }
  }

  function drawDots() {
    for(i = 0; i < dots.nb; i++){
      var dot = dots.array[i];
      dot.draw();
    }
  }

  function animateDots() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    moveDots();
    connectDots();
    drawDots();

    requestAnimationFrame(animateDots);	
  }

  $('canvas').on('mousemove', function(e){
    mousePosition.x = e.pageX;
    mousePosition.y = e.pageY;
  });

  $('canvas').on('mouseleave', function(e){
    mousePosition.x = canvas.width / 2;
    mousePosition.y = canvas.height / 2;
  });

  createDots();
  requestAnimationFrame(animateDots);	
});
</script>-->
<script type="text/javascript">
	;(function(window){
			function Dotline(option){
				this.opt = this.extend({
					dom:'',//画布id
					cw:200,//画布宽
					ch:200,//画布高
					ds:100,//点的个数
					r:0.5,//圆点半径
					cl:'#000',//颜色
					dis:100//触发连线的距离
				},option);
				this.c = document.getElementById(this.opt.dom);//canvas元素id
				this.ctx = this.c.getContext('2d');
				this.c.width = this.opt.cw;//canvas宽
				this.c.height = this.opt.ch;//canvas高
				this.dotSum = this.opt.ds;//点的数量
				this.radius = this.opt.r;//圆点的半径
				this.disMax = this.opt.dis*this.opt.dis;//点与点触发连线的间距
				this.color = this.color2rgb(this.opt.cl);//设置粒子线颜色
				this.dots = [];
				//requestAnimationFrame控制canvas动画
				var RAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
				            window.setTimeout(callback, 1000 / 60);
				        };
				var _self = this;
				//增加鼠标效果
				var mousedot = {x:null,y:null,label:'mouse'};
				this.c.onmousemove = function(e){
					var e = e || window.event;
					mousedot.x = e.clientX - _self.c.offsetLeft;
					mousedot.y = e.clientY - _self.c.offsetTop;
				};
				this.c.onmouseout = function(e){
					mousedot.x = null;
					mousedot.y = null;
				}
				//控制动画
				this.animate = function(){
					_self.ctx.clearRect(0, 0, _self.c.width, _self.c.height);
					_self.drawLine([mousedot].concat(_self.dots));
					RAF(_self.animate);
				};
			}
			//合并配置项，es6直接使用obj.assign();
			Dotline.prototype.extend = function(o,e){
				for(var key in e){
					if(e[key]){
						o[key]=e[key]
					}
				}
				return o;
			};
			//设置线条颜色(参考{抄袭}张鑫旭大大，http://www.zhangxinxu.com/wordpress/2010/03/javascript-hex-rgb-hsl-color-convert/)
			Dotline.prototype.color2rgb = function(colorStr){
				var red = null,
					green = null,
					blue = null;
				var cstr = colorStr.toLowerCase();//变小写
				var cReg = /^#[0-9a-fA-F]{3,6}$/;//确定是16进制颜色码
				if(cstr&&cReg.test(cstr)){
					if(cstr.length==4){
						var cstrnew = '#';
						for(var i=1;i<4;i++){
							cstrnew += cstr.slice(i,i+1).concat(cstr.slice(i,i+1));
						}
						cstr = cstrnew;
					}
					red = parseInt('0x'+cstr.slice(1,3));
					green = parseInt('0x'+cstr.slice(3,5));
					blue = parseInt('0x'+cstr.slice(5,7));
				}
				return red+','+green+','+blue;
			}
			//画点
			Dotline.prototype.addDots = function(){
				var dot;
				for(var i=0; i<this.dotSum; i++){//参数
					dot = {
						x : Math.floor(Math.random()*this.c.width)-this.radius,
						y : Math.floor(Math.random()*this.c.height)-this.radius,
						ax : (Math.random() * 2 - 1) / 1.5,
						ay : (Math.random() * 2 - 1) / 1.5
					}
					this.dots.push(dot);
				}
			};
			//点运动
			Dotline.prototype.move = function(dot){
				dot.x += dot.ax;
				dot.y += dot.ay;
				//点碰到边缘返回
				dot.ax *= (dot.x>(this.c.width-this.radius)||dot.x<this.radius)?-1:1;
				dot.ay *= (dot.y>(this.c.height-this.radius)||dot.y<this.radius)?-1:1;
				//绘制点
				this.ctx.beginPath();
				this.ctx.arc(dot.x, dot.y, this.radius, 0, Math.PI*2, true);
				this.ctx.stroke();
			};
			//点之间画线
			Dotline.prototype.drawLine = function(dots){
				var nowDot;
				var _that = this;
				//自己的思路：遍历两次所有的点，比较点之间的距离，函数的触发放在animate里
				this.dots.forEach(function(dot){
					
					_that.move(dot);
					for(var j=0; j<dots.length; j++){
						nowDot = dots[j];
						if(nowDot===dot||nowDot.x===null||nowDot.y===null) continue;//continue跳出当前循环开始新的循环
						var dx = dot.x - nowDot.x,//别的点坐标减当前点坐标
							dy = dot.y - nowDot.y;
						var dc = dx*dx + dy*dy;
						if(Math.sqrt(dc)>Math.sqrt(_that.disMax)) continue;
						// 如果是鼠标，则让粒子向鼠标的位置移动
						if (nowDot.label && Math.sqrt(dc) >Math.sqrt(_that.disMax)/2) {
							dot.x -= dx * 0.02;
							dot.y -= dy * 0.02;
						}
						var ratio;
						ratio = (_that.disMax - dc) / _that.disMax;
						_that.ctx.beginPath();
						_that.ctx.lineWidth = ratio / 2;
	          			_that.ctx.strokeStyle = 'rgba('+_that.color+',' + parseFloat(ratio + 0.2).toFixed(1) + ')';
						_that.ctx.moveTo(dot.x, dot.y);
						_that.ctx.lineTo(nowDot.x, nowDot.y);
						_that.ctx.stroke();//不描边看不出效果

						//dots.splice(dots.indexOf(dot), 1);
					}
				});
			};
			//开始动画
			Dotline.prototype.start = function(){
				var _that = this;
				this.addDots();
				setTimeout(function() {
				     _that.animate();
				}, 100);
			}
			window.Dotline = Dotline;
		}(window));
		//调用
		window.onload = function(){
			var dotline = new Dotline({
				dom:'J_canvas',//画布id
				cw:window.innerWidth,//画布宽
				ch:window.innerHeight,//画布高
				ds:200,//点的个数
				r:0.5,//圆点半径
				cl:'#4f5360',//粒子线颜色
				dis:150//触发连线的距离
			}).start();
		}
//		var o = parent.location.pathname;
//		console.log(o);
</script>
</html>