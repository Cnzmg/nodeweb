<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content=""/>
		<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
		<title></title>
		<script src="http://www.jq22.com/jquery/jquery-2.1.1.js"></script>
		<script src="https://cdn.bootcss.com/Swiper/3.4.2/js/swiper.jquery.min.js"></script>
		<link href="https://cdn.bootcss.com/Swiper/3.4.2/css/swiper.min.css" rel="stylesheet">
		<script src="/javascripts/vconsole.min.js" type="text/javascript" charset="utf-8"></script>
		<style type="text/css">
			*{margin: 0;padding: 0;}
			html,body{
				width: 100%;
				height: 100%;
				overflow: hidden;
			}
			.ontouch{
				width: 100%;
				height: 100px;
				overflow: hidden;
			}
			.ontouch ul{
				width: 100%;
				list-style: none;
				position: relative;
			}
			.ontouch ul li{
				width: 18%;
				height: 100px;
				background: red;
				margin: 10px;
				float: left;
				position: relative;
			}
			#id div{
				padding: 10px;
				box-sizing: border-box;
			}
		</style>
	</head>
	<body>
		<div id="id">
			测试用例
			<%= body %>
		</div>
		<a href="./test-active.html">惦记我</a>
		<div class="medlue ontouch">
			<ul class="swiper-wrapper item">
				<li class="swiper-slide"></li>
				<li class="swiper-slide"></li>
				<li class="swiper-slide"></li>
				<li class="swiper-slide"></li>
				<li class="swiper-slide"></li>
			</ul>
		</div>
		<script type="text/javascript">
//			var mbox = {
//				init:function(e){
//					this.time = e || 1;
//					this.id = document.getElementById(e.id);
//					this.show = this.render(e);
//					this.node = this.htmlnode(e);
//				},
//				render:function(e){
//					var _this = e;
//				},
//				hide:function(e){
//					var _this = e;
//					document.getElementById(_this.id).style.display = "none";
//				},
//				htmlnode:function(e){
//					var _this = e;
//					document.getElementById(_this.id).style.backgroundColor = "#000";
//					setTimeout(function(){
//						console.log(e.time)
//						mbox.hide(e);
//					},parseInt(_this.time * 1000));
//				},
//				body:function(){
//					var _this = this;
//				}
//			}
//			mbox.init({time:6,id:"id"});
			
			
			//独立的自制弹窗库   开发中ing
//			(function(root,factory){
//				//配置  浏览器内置对象    ---amd(异步模块定义)   ---cmd(公共模块定义)  ---umd(通用模块定义)
//				if (typeof define === 'function' && define.amd) {
//					define(['$', 'query'], factory);
//				} else if (typeof exports === 'object') { //umd
//					module.exports = factory();
//				} else {
//					root.Cnzmg = factory(window.Zepto || window.jQuery || $);
//				}
//				
//			})(this, function($,jQuery){
//				$.fn.Cnzmg = function(settings){
//					var arr = [];
//					$(this).each(function(){
//						var options = $.extend({
//							target: $(this)
//						}, settings);
//						var cn = new Cnzmg();
//						cn.init(options);
//						arr.push(cn);	//追加到数组
//					});
//					return arr;
//				}
//				function Cnzmg(){
//					//节点参数
//					var ran = Math.random().toString().replace('.','');
//					this.id = "cnzmg_" + ran;
//				}
//				Cnzmg.prototype = {
//					init:function(settings){
//						this.settings = $.extend({
//							callback: null,
//							pageSize: 1
//						}, settings);
//						this.target = function(){};
//						this.shop = function(){};
//					},
//					callbackfn:function(){},
//					session:function(){}
//				}
//				return Cnzmg;
//			});
			
		</script>
		<!--<script type="text/javascript">
			$('#id').Cnzmg({
				pageSize:10,
				callback:function(){
					alert(1);
				}
			})
		</script>-->
		<script type="text/javascript">
			new VConsole();
			//单例模式
			class CreateUser {
				constructor (name) {
					this.name = name;
					this.getName();
				}
				getName(){
					return name;
				}
			}
			//代理实现单例模式
			var ProxyMode = (function(){
				var instance = null;
				return function(name){
					if(!instance){
						instance = new CreateUser(name);
					}
					return instance;
				}
			})();
			//测试单例模式示例
			var a = new ProxyMode();
			var b = new ProxyMode();
            //因为单体模式是只实例化一次，所以下面的实例是相等的
			console.log(a === b);
			
			//策略模式
			var classStyle = {  //策略类
				A:function(m){
					return m * 4;
				},
				B:function(m){
					return m * 3;
				},
				C:function(m){
					return m * 2;
				}
			}
			//环境类
			var calculateBouns = function(obj,m){
				return classStyle[obj](m);
			};
			console.log(calculateBouns('A',3000))
//************************************************************************************
			//表单验证插件
			var $input = {
				init:function(e){  //初始化实例
					return function(fn){  //返回一个方法
						if(e < 200){
							$input.sf(fn * e);
						}
					};
				},
				sf:function(e){
					var e = e || {};
					console.log(e);
				}
			}
			var fn = $input.init(123);
			fn(899);
//************************************************************************************			
			//实现类 的 传统方式 构造函数 形式
			function Point(x,y){
				this.x = x;
				this.y = y;
			}
			Point.prototype.tostring = function(){
				return "(" + this.x + "," + this.y + ")";
			}
			var p = new Point(2,3);
			console.log(p.tostring());
			
//*************************************************************************************
			//供应
			function belif(t,f){
				
				if(t === 'c'){
					t = 'click';
					f.apply(this,arguments);
				}
				
			}
			belif('c',function(e){
				console.log(e);
			});
						
//*************************************************************************************
			//call()
			window.number = 'one';
			document.number = 'one1';
			function changer(){
				console.log(this.number);
			}
			changer.call(this);
			var callspke = {
				work: '...',
				spkee:function(say){
					console.log(say +''+ this.work);
				}
			}
			callspke.spkee('spkee');
			var opcall = {
				work:'opcall is call'
			}
			callspke.spkee.call(opcall,'Spkee ');    //call  this 里面指向为第一参数的集合

			//apply()
			 var applyspke = function(w)	{
			 	this.work = "welcome looking me!";
			 	this.spkee = function(e){
			 		console.log(e + '' + this.work);
			 		return this.work;
			 	}
			 }
			 
			 function Dog(w){
			 	applyspke.apply(this,arguments);
			 }
			 var p = new Dog('dog');
			 p.spkee(123);


//*************************************************************************************
			//左右拉 的产品图片
			var onTouch = (function(){
				var li = document.getElementsByTagName('li'),i = 0,x;
				for(;i < li.length; i ++){
					li[i].style.backgroundColor = function (m,t,e) {
						return(e ? arguments.callee(m, t, e - 1) : "#")+ t[m.floor(16 * m.random())];
					}(Math,'0123456789abcdef',li.length);
					new Swiper('.ontouch',{
					  freeMode : true,
					  slidesPerView : 'auto',
					  freeModeSticky : true ,
					});
//					li[i].addEventListener('touchstart',function(e){
//						e.preventDefault();
//						x = e.touches[0].pageX;
//					})
//					li[i].addEventListener('touchmove',function(e){
//						e.preventDefault();
//						var __this = this.parentNode;
//						__this.style.left = (e.changedTouches[0].pageX - x) + "px";
//					})
				}
			})();

//*************************************************************************************
//			es6继承
			class point {
				
			};
			class colorPoint extends point{  //colorPrint 继承point 类的所有内容
				constructor(x,y,color){
					super(x,y);   //调用父类的构造函数 使用在 this 前面
					this.color = color;   //当前指向 使用了 colorPrint 类
				}
				
				toString(){
					return this.color + ' ' +super.toString();   //对象类方法
				}
			}
			
			let cp = new colorPoint(25,80,(function(){
				return function (m,t,e) {
					return(e ? arguments.callee(m, t, e - 1) : "#")+ t[m.floor(16 * m.random())];
				}(Math,'0123456789abcdef',5);
			})());
			let htmlnode = document.createElement('div');  //创建html 节点元素
			htmlnode.appendChild(document.createTextNode(JSON.stringify(cp)));
			let id = document.getElementById('id');
			id.appendChild(htmlnode);
			id.children[0].style.backgroundColor = cp.color;
			id.children[0].innerHTML = p.spkee('dog');
			document.title = id.children[0].innerHTML;

//*************************************************************************************

			//定义连接字符串的函数
			function myArray(arr){
				var args = Array.prototype.slice.call(arguments,1);
				return args.join(arr);
			};
			console.log(myArray('>','red','blue','gold','yellow'));
			
			var a =	(function(){
				return function (arr){
					var args = Array.prototype.slice.call(arguments,1);
					return args.join(arr);
				}('>','red','blue','gold','yellow');
			})();
			
			console.log(window);
			
//*************************************************************************************

			//通过匿名自调用函数
			function unlock(p){
				return function(h){
					return p + h;
				}
			};
			var m;
			(function () {
				m = unlock('c');
			})();
			(function () {
				m = m('n');
			})();
			console.log(m)


//*************************************************************************************

			//抽象相等比较   ==  严格相等比较  ===  使用于Array.prototype.indexOf  Array.prototype.lastIndexOf  case-matching
			//
			






//*************************************************************************************

//*************************************************************************************

 			let c = '设备编号：100001---当前清单：10004临时活动清单,设备编号：100002---当前清单：10004临时活动清单,设备编号：100033---当前清单：10004临时活动清单,';
 			let cstr = c.match(/：(\d*)(?=-)/g);
 			console.log(c.match(/：\d+(\d*)(?=-)/g));
 			console.log(cstr.toString().replace(/：/g,''))
   			console.log(c.substring(c.search('：') + 1,c.search('-')));

//*************************************************************************************



//*************************************************************************************

			function action(n){
//				console.log(n[0].name);
//				console.log(n.find());
				return n.name == 123;
			}
			
			var arre = [{name:123},{name:222}];
			console.log(arre.find(action))
			
//*************************************************************************************
		</script>
	</body>
</html>
